1) var: Variables declared with "var" in JS are function scope
   let+const: Variable declared with "let" or "const" are block scope.

2) Destructuring Array or Object: Destructuring Assignment is a JavaScript expression that allows to unpack values from 
arrays, or properties from objects, into distinct variables data can be extracted from arrays, objects, nested objects and assigning 
into variables.

3) Template Strings: Template strings are a powerful feature of modern JavaScript released in ES6. It lets us insert
variables and expressions into strings without needing to concatenate like in older versions of JavaScript. It allows 
us to create strings that are complex and contain dynamic elements. 

4) Default Operator: This operator allow names parameters to be initialized with default values if no value or undefined
is passed.

Rest Operator: This parameter is an improved way to handle function parameter, allowing us to more easily handle various input
as parameters in a function.

Spread Operator: It allows an iterable to expand in places where 0+ arguments are expected. It is mostly used in the variable array 
where there is more than 1 value is expected. It allows us the privilege to obtain a list of parameters from an array. Syntax of 
Spread operator is the same as the Rest parameter but it works completely opposite of it.   

5) Arrow Functions:  ES6 fat arrow functions have a shorter syntax compared to function expressions and lexically bind this value. Arrow 
functions are always anonymous and effectively turn function (arguments) { expression } into arguments fat arrow symbol expression.

6) Promise:A Promise has Three states:
           fulfilled: Action related to the promise succeeded.
           rejected: Action related to the promise failed.
           pending: Promise is still pending i.e not fulfilled or rejected yet.
Promises can be consumed by registering functions using .then and .catch methods.

then()
then() is invoked when a promise is either resolved or rejected.

catch()
catch() is invoked when a promise is either rejected or some error has occurred in execution
